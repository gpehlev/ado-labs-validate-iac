name: 'Terraform-Merge'

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  TF_LOG: INFO
  TF_IN_AUTOMATION: TRUE

jobs:
  terraform:
    name: 'Terraform-Merge'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest or windows-latest. Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: ./main

    steps:
      # Checkout the repository on the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the preferred version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} # Disabled: The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file (optional)

      # Download plan file as build artifact
      - name: Download workflow artifact
        uses: dawidd6/action-download-artifact@v2.23.0
        id: download-artifact
        with:
          # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
          # Required, if the artifact is from a different repo
          # Required, if the repo is private a Personal Access Token with `repo` scope is needed
          github_token: ${{secrets.GITHUB_TOKEN}}
          # Optional, workflow file name or ID
          # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
          workflow: terraform-pr.yml
          # Optional, the status or conclusion of a completed workflow to search for
          # Can be one of a workflow conclusion:
          #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
          # Or a workflow status:
          #   "completed", "in_progress", "queued"
          # Use the empty string ("") to ignore status or conclusion in the search
          workflow_conclusion: success
          # Optional, will get head commit SHA
          pr: ${{github.event.pull_request.number}}
          # Optional, no need to specify if PR is
          # commit: ${{github.event.pull_request.head.sha}}
          # Optional, will use the specified branch. Defaults to all branches
          # branch: main
          # Optional, defaults to all types
          # event: push
          # Optional, will use specified workflow run
          # run_id: 1122334455
          # Optional, run number from the workflow
          # run_number: 34
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them into respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          name: terraform-plan
          # Optional, a directory where to extract artifact(s), defaults to the current directory
          path: ${{ github.workspace }}
          # Optional, defaults to current repo
          # repo: ${{ github.repository }}
          # Optional, check the workflow run to whether it has an artifact
          # then will get the last available artifact from the previous workflow
          # default false, just try to download from the last one
          check_artifacts:  false
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          search_artifacts: false
          # Optional, choose to skip unpacking the downloaded artifact(s)
          # default false
          skip_unpack: false
          # Optional, choose how to exit the action if no artifact is found
          # can be one of:
          #  "fail", "warn", "ignore"
          # default fail
          if_no_artifact_found: fail

      - name: Unpack workflow artifact
        run: tar -xvzf ${{ github.workspace }}/terraform-plan.zip

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"

      # # Run terraform validate
      # - name: Terraform Validate
      #   id: validate
      #   # if: github.ref != 'refs/heads/main' && (success() || failure()) # Disabled for the time being
      #   run: terraform validate -no-color

      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform apply ${{ github.workspace }}/terraform.tfplan